//-----------------------------------------------------------------------
//------------------- Copyright (c) samisalreadytaken -------------------
//                       github.com/samisalreadytaken
//- v1.0.6 --------------------------------------------------------------
//
// ::Glow.Set(hPlayer, color, nType, flDistance)
// ::Glow.Disable(hPlayer)
//
if(!("Glow"in::getroottable())||typeof::Glow!="table"||!("Set"in::Glow)){::Glow<-{function Set(src,color,style,dist){local glow=Get(src);if(glow){if(DEBUG)::print("Glow::Set: Updating glow ["+src.entindex()+"]\n")}else{if(DEBUG)::print("Glow::Set: Setting glow ["+src.entindex()+"]\n");foreach(e in _list)if(e)if(!e.GetMoveParent()){glow=e;break};;if(glow){glow.SetModel(src.GetModelName())}else{glow=::CreateProp("prop_dynamic_glow",src.GetOrigin(),src.GetModelName(),0);_list.append(glow.weakref())};glow.__KeyValueFromInt("rendermode",6);glow.__KeyValueFromInt("renderamt",0);::VS.SetParent(glow,src);::VS.MakePermanent(glow)};if(typeof color=="string")glow.__KeyValueFromString("glowcolor",color);else if(typeof color=="Vector")glow.__KeyValueFromVector("glowcolor",color);else throw"parameter 2 has an invalid type '"+typeof color+"' ; expected 'string|Vector'";;glow.__KeyValueFromInt("glowstyle",style);glow.__KeyValueFromFloat("glowdist",dist);glow.__KeyValueFromInt("glowenabled",1);glow.__KeyValueFromInt("effects",18433);return glow}function Disable(src){local glow=Get(src);if(glow){glow.__KeyValueFromInt("effects",18465);::VS.SetParent(glow,null);::EntFireByHandle(glow,"setglowdisabled");if(DEBUG)::print("Glow::Disable: Disabled glow ["+src.entindex()+"]\n")}else{if(DEBUG)::print("Glow::Disable: No glow found ["+src.entindex()+"]\n")};return glow}function Get(src){if(!src||!src.GetModelName().len())throw"Glow: Invalid source entity";for(local i=_list.len();i--;){local g=_list[i];if(g){if(g.GetMoveParent()==src)return g}else _list.remove(i)}}DEBUG=false,_list=[]}};;
