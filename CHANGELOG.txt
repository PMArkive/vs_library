
	github.com/samisalreadytaken/vs_library

--------------------------------

2022-09-16 [v2.43.25]
- Increased precision of VS.MatrixBuildRotation to 0.000061 degrees from 0.0573 degrees
- Fixed loading an old version of the library over a new one invalidating ::ToExtendedPlayer. Fix is applied post-2.43.5. Retroactive manual fix is to use VS.ToExtendedPlayer

2022-08-26 [v2.43.24]
- Added VS.ClipRayToBox
- Added VS.ClipRayToOBB
- Fixed hull and non-swept trace in VS.IsRayIntersectingOBB
- Fixed trace parameter of VS.IntersectRayWithRay
- Fixed VS.CalcSqrDistanceToAABB
- Fixed VS.CalcClosestPointOnAABB return value

2022-08-07 [v2.43.23]
- Added VS.IsOBBIntersectingOBB
- Added VS.ComputeSeparatingPlane

2022-07-12 [v2.43.22]
- Fixed VS.ConcatTransforms incorrect translation calculation
- Deprecated CExtendedPlayer::SetInputCallback(), moved to VS.SetInputCallback(). No functional changes.
	Update existing code by changing `player.SetInputCallback( ... )` to `VS.SetInputCallback( player, ... )`
- Removed VS.FindEntityNearestFacing, VS.FindEntityClassNearestFacing, VS.FindEntityClassNearestFacingNearest
- Removed VS.Hermite_SplineBasis
- Removed VS.Log.enabled
- Removed VS.Log.Run data parameter, it now only takes callback and environment parameters
- Removed VS.Log.Run call environment fallback for user callback to allow already bound functions

2022-06-25 [v2.43.21]
- Added VS.WorldToScreen
- Changed VS.WorldToScreenMatrix and VS.ComputeCameraVariables to be consistent with engine definitions. Coordinate range is changed from [0,1] to [-1,1].

2022-06-23 [v2.43.20]
- Added VS.WorldToScreenMatrix
- Removed VS.ScreenToWorldMatrix
	To get the ScreenToWorld matrix, invert the WorldToScreen matrix using VS.MatrixInverseGeneral
	Note that VS.ScreenToWorld still requires ScreenToWorld matrix input.

2022-06-09 [v2.43.19]
- Fixed vertical VS.TraceLine.GetNormal calculations
- Fixed CExtendedPlayer::SetInputCallback callback unregistration

2022-06-06 [v2.43.18]
- Fixed in==out condition in VS.MatrixInverseTR
- Removed VS.ComputeViewMatrix
- Removed trace_t metamethods

2022-06-03 [v2.43.17]
- Added CExtendedPlayer::GetFOV

2022-05-30 [v2.43.16]
- Added support for synchronous game event callbacks. See the documentation on VS.ListenToGameEvent for details.
- Added (debug) VS.Events.DumpListeners
- Removed VS.FixupEventListener
- Removed deprecated functions VS.ValidateUseridAll, VS.ForceValidateUserid

2022-05-27 [v2.43.15]
- Fixed VS.TraceLine.GetNormal() regression in v2.43.14
- Fixed CExtendedPlayer::SetInputCallback() cleanup on disabling the listener
- Fixed VS.Catmull_Rom_Spline_Integral()
- Fixed VS.Catmull_Rom_Spline_Integral2()

2022-05-14 [v2.43.14]
- Fixed VS.InterpolateAngles not having a default output parameter
- Fixed VS.QuaternionExp, VS.QuaternionLn, VS.QuaternionSquad, VS.QuaternionAverageExponential functions returning incorrect values
- Fixed VS.Hermite_SplineBasis

2022-05-11 [v2.43.13]
- Fixed VS.DrawCapsule missing lines and rotation
- Removed deprecated functions VS.CreateMeasure, VS.SetMeasure. Instead use ToExtendedPlayer() for player eye angles.

2022-05-08 [v2.43.12]
- Fixed CExtendedPlayer::GetUserID() always returning -1 when ToExtendedPlayer() was called before player spawn
on a player who was connected to the server before map change. It will now return the
correct value after the player spawns.
- Added more error case console prints in game events library.
- Removed deprecated functions VS.Events.ValidateUseridAll, VS.Events.ForceValidateUserid
- Fixed glow.nut bug where setting a glow after disabling one in the same frame would not enable the glow.

2022-04-20 [v2.43.11]
- Fixed save/restore crash in Portal 2
- Fixed VS.VectorYawRotate() regression for in==out conditions
- Added console message print on library load
- Removed support for old vs_events library methods

2021-10-20 [v2.43.10]
- Fixed VS.MatrixCopy for cross-type matrix copying (matrix3x4_t v VMatrix and vice versa)

2021-10-19 [v2.43.9]
- Fixed a bug in VS.RotationDelta that would calculate the wrong value
- Eliminated redundant code in VS.QuaternionMult
- Optimised VS.QuaternionMA
- Optimised VS.MatrixCopy
- Optimised VS.IsRayIntersectingOBB

2021-10-17 [v2.43.8]
- Added alternative parameters on VS.AddOutput (output, target, input, parameter, delay, timesToFire)
- More minor bytecode optimisations in math lib
- Fixed vs_events.nut compilation error

2021-10-10 [v2.43.7]
vs_math:
- Changed method of internal matrix storage for improved performance and memory usage on initialisation and member access.
This especially matters for places with high amount of transforms and multiplications.
For instance: VectorTransform is 25%, MatrixMultiply is 70% faster.
However 2D member access is now significantly slower than previously.
- Bytecode optimisations mostly favouring less instruction count in exchange for larger stack size.
- Bytecode optimisations to reduce stack size in exchange for lesser readability.
- Added matrix3x4_t::InitXYZ (FLU)
- Removed VS.ComputeVolume

2021-10-03 [v2.43.6]
- Fixed VS.MatrixBuildRotationAboutAxis bug in the minified files
- Fixed in==out conditions in VS.ConcatRotations
- Optimisations in VS.ConcatRotations, VS.ConcatTransforms, VS.MatrixMultiply (decreased instr, increased stack size)
- Renamed VS.ExponentialDecay2 to VS.ExponentialDecayHalf
- Optimisation in vs_events
- CExtendedPlayer member variables are now forward compatible
- Renamed CExtendedPlayer::bot to CExtendedPlayer::fakeplayer
- VS.Log internal data is now initialised with VS.Log.Clear

2021-09-24 [v2.43.5]
- Fixed early event listener registration
- Fixed VS.RotationDeltaAxisAngle return value
- Added VS.DrawHorzArrow
- Added VS.DrawVertArrow
- Fixed Portal 2 compilation

2021-09-20 [v2.43.4]
- Added VS.IntersectRayWithTriangle
- Added VS.ComputeIntersectionBarycentricCoordinates
- Added VS.VectorMultiply, VS.VectorDivide
- Added HTML colourable CenterPrintAll (CS_UM_TextMsg)
- Added warning messages on calls to deprecated functions.
- Fixed Portal 2 compatibility of CExtendedPlayer
- Minor optimisation in Ray_t::InitBox
- Renamed VS.VectorRotate2 to VS.VectorRotateByAngle
- Renamed VS.VectorRotate3 to VS.VectorRotateByQuaternion

2021-09-12 [v2.43.3]
- Minor optimisation in VS.EventQueue.CreateEvent
- Removed debug function VS.GetTableDir
- Removed debug function VS.FindVarByName

2021-09-07 [v2.43.2]
- Fixed event callbacks in condition where they were fired in the frame before round start (e.g. player_spawn)
- Added VS.IntersectRayWithBox
- Added VS.IntersectRayWithOBB
- Removed con print in ToExtendedPlayer
- Fixed typo in the minified library file

2021-09-04 [v2.43.1]
- Added backwards compatible string contexts in CExtendedPlayer::SetInputCallback
for setting any amount of callbacks on one player.
- Added constants MASK_NPCWORLDSTATIC, MASK_SOLID

2021-09-03 [v2.43.0]
- Added consistent player info (name, networkid) acquisition on listen servers
- Made CExtendedPlayer members const
- Added VS.ApproachVector
- Added VS.ScreenToWorldMatrix
- Changed VS.ScreenToWorld parameters (signature change!)
- Changed VS.DrawFrustum matrix parameter to inverse view matrix (inverse of previous)
- Removed VS.DrawEntityBounds
- Log export file name is now passed to the callback function

2021-08-27 [v2.42.0]
- Added ::ToExtendedPlayer
- Added ::SetPlayerFOV
- Added enum TextColor
- Removed enum txt
- Removed fov.nut
- Deprecated VS.CreateMeasure
- Deprecated VS.SetMeasure

2021-08-16 [v2.41.1]
- Fixed player data sometimes not auto validating on some maps

2021-08-09 [v2.41.0]
- Added rudimentary version control on load
- Completely automated userid validation, requiring no manual input
- Added userid caching - significantly better performane on VS.GetPlayerByUserid
- VS.ValidateUseridAll now only takes 1 frame to validate all players (requires fixup)
- Fixed automatic userid validation skipping players when the listeners were not fixed up
- Added mask parameter on VS.TraceLine
- Math library optimisations
- Bytecode optimisations
- Fixed return value of VS.QuaternionNormalize
- Fixed VS.ScreenToWorld
- Fixed FLT_MAX, FLT_MIN, FLT_EPSILON values
- Fixed VS.DumpScope not skipping documentation
- Rewrote VS.GetStackInfo in the style of default error print
- Renamed VS.GetStackInfo to VS.PrintStack
- Fixed VS.ArrayToTable
- Added fallback array access to Quaternion, matrix3x4_t and VMatrix classes
- Changed matrix constructor parameters (signature change!)
- Removed format parameters of VecToString to keep its purpose simple
- Removed VS.GetAngle2D (as it is identical to VS.VecToYaw)
- Removed VS.AddOutput2
- Removed VS.GetTickrate
- Removed VS.InvRSquared
- Removed VS.a_swap
- Removed VS.MatrixRowDotProduct
- Removed VS.MatrixColumnDotProduct
- Removed VS.Collision_ClearTrace
- Removed VS.arrayFind
- Removed VS.arrayApply
- Removed VS.arrayMap
- Temporarily removed VS.IsDedicatedServer
- Merged math files (vs_math, vs_math2, vs_interp, vs_collision)
- vs_math and vs_events can now be used independently
- Fixed setting multiple glows synchronously

2021-06-27 [v2.40.3]
- Removed VS.TraceLine.Ray()
- Fixed VS.AngleIMatrix
- Added Ray_t()
- Reworked VS.IsBoxIntersectingRay - function signature is changed
- Added VS.IsRayIntersectingOBB
- Added VS.IntersectInfiniteRayWithSphere
- Added VS.IntersectRayWithRay
- Added VS.IntersectRayWithPlane
- Added VS.RandomVectorInUnitSphere
- Added VS.RandomVectorOnUnitSphere

2021-06-22 [v2.40.2]
- Added class support for VS.EventQueue
- Renamed VS.VectorMultiply<float> to VS.VectorScale
- Removed VS.VectorDivide and VS.VectorMultiply
- Added VS.Log.Pop
- Added VS.MatrixInverseTR
- Added VS.QuaternionLn
- Added VS.QuaternionExp
- Added VS.QuaternionSquad
- Added VS.QuaternionAverageExponential
- Optimised VS.MatrixBuildPerspective
- Optimised interpolation algorithms
- Fixed no export log printing
- Fixed VS.MatrixQuaternionFast
- Fixed VS.Spline_Normalize
- Fixed VS.QuaternionSlerp and VS.QuaternionSlerpNoAlign
- Replaced fovY parameters with aspectRatio in VS.MatrixBuildPerspective and VS.DrawViewFrustum
- Inverted VS.ComputeCameraVariables matrix by default
- Removed VS.Catmull_Rom_SplineQuat hacks
- Removed vs_math2 inclusion in extended library files, the users will now need to include it themselves.

2021-05-31 [v2.40.1]
- Various optimisations
- Removed VS.DrawEntityBBox
- Moved VS.VectorNegate into base from vs_math2
- Added destination parameter in VS.VectorAngles
- Added destination parameter in VS.InterpolateAngles
  (vs_math2)
- Renamed VS.MatrixAnglesQ to VS.MatrixQuaternionFast
- Added VS.GetBoxVertices
- Added VS.DrawBoxAngles
- Added VS.DrawSphere
- Added VS.DrawCapsule
- Added VS.DrawEntityBounds
- Added VS.DrawFrustum
- Added VS.DrawViewFrustum
- Added VMatrix
- Added VS.RotationDelta
- Added VS.Vector3DMultiplyProjective
- Added VS.Vector3DMultiplyPositionProjective
- Added VS.MatrixBuildPerspective
- Added VS.MatrixInverseGeneral
- Added VS.MatrixBuildRotation
- Added VS.MatrixBuildRotationAboutAxis
- Added VS.ComputeCameraVariables
- Added VS.ScreenToWorld
- Added VS.CalcFovX
- Added VS.CalcFovY
- Fixed VS.ComputeCenterMatrix, VS.ComputeCenterIMatrix
- Fixed (in == out) conditions for:
	VS.VectorYawRotate
	VS.VectorTransform
	VS.VectorITransform
	VS.VectorRotate
	VS.VectorIRotate
- Renamed `matrix3x4_t::m_flMatVal` to `matrix3x4_t::m`
- Moved optional position parameters on some matrix functions for consistency. This changes function signatures!
	Affected functions: AngleMatrix, AngleIMatrix, QuaternionMatrix
		`VS.AngleMatrix( angles, matrix )` -> `VS.AngleMatrix( angles, null, matrix )`

  (vs_interp)
- Removed default output parameters

2021-05-28 [v2.40.0]
- Added VS.FixupEventListener
- Fixed server initialisation
- Fixed a bug with exporting large data with VS.Log

2021-05-12 [v2.39.11]
- Server initialisation bug fix (reverted)

2021-05-04 [v2.39.10]
- VS.EventQueue bug fix

2021-01-29 [v2.39.9]
- Added VS.EventQueue.CreateEvent
- VS.EventQueue.AddEventInternal signature is changed!
- Added optional parameter on VS.Log.Run to print a custom log array.

  (glow.nut v1.0.9)
- Removed vs_library dependency
- Removed Glow.DEBUG
- Reduced file size

2021-01-23 [v2.39.8]
- EventQueue bugfix

2021-01-17 [v2.39.7]
- Improved memory usage on VS.Log.Add and VecToString

2021-01-10 [v2.39.6]
- Reduced memory usage on event data acquisition

2020-12-12 [v2.39.5]
- Reduced file size and memory usage

2020-12-01 [v2.39.4]
- Improved performance on EventQueue
- Removed ForceReload. It can be replicated with: `VS._reload = true; IncludeScript("vs_library")`

2020-11-14 [v2.39.3]
- Removed ENT_SCRIPT as it is no longer needed since 2.39.0

2020-11-10 [v2.39.2]
- Minor cleanup on Log
- fov.nut (v1.0.3)
- Moved turret.nut (v0.5.3) to vscripts repository

2020-11-06 [v2.39.1]
- EventQueue hotfix

2020-11-05 [v2.39.0]
- Added EventQueue
- Consistent formatting
- Removed ClearChat

2020-10-27 [v2.38.5]
- A better method of loading

2020-10-19 [v2.38.4]
- Renamed VS.TraceLine.hIgnore to 'ignore'.
- More pointless minor performance improvements.

2020-10-08 [v2.38.3]
- Renamed FindEntityByIndex to GetEntityByIndex
- Removed FindEntityByString
- Increased IsDedicatedServer init timeout to 12 from 6
- "Fixed" rare case of Log not working on listen servers

2020-09-27 [v2.38.0]
- Improved performance on GetPlayerByUserid, GetPlayerByIndex, GetPlayersAndBots, GetAllPlayers, VectorIsZero
- Renamed VS.Log.filePrefix to file_prefix, VS.Log.condition to enabled
- Renamed MakePermanent to MakePersistent
- Renamed SetKey to SetKeyValue
- Cleanup

2020-09-19 [v2.37.1]
- Removed ::SPlayer

2020-08-19
- Pushed missing files

2020-08-16 [v2.37.0]
- Added native support for Portal 2
- Added VS.IsDedicatedServer()
- Removed Format functions
- Event related functions and variables are now declared
  only when eventlisteners exist on the map

2020-08-11
- Pushed missing files

2020-08-07 [v2.36.10]
- General cleanup, minor performance improvements
- Bugfix on turret.nut (v0.5.2)
- Minor improvements on glow.nut (v1.0.7) and fov.nut (v1.0.1)

2020-07-11 [v2.36.9]
- Added fov.nut (v1.0.0)
- Added turret.nut (v0.5.1)
- Changed ForceValidateUserid to not require another eventlistener.

2020-07-04 [v2.36.8]
- Added VS.Events.ValidateUseridAll()

2020-06-22 [v2.36.7]
- Minor change: create object only when needed,
  not on initialisation where it may not even ever be used

2020-06-09 [v2.36.6]
- Added ForceValidateUserid to base (vs_library.nut)
- Removed AddEventCallback

2020-05-28
- Changes in math2, interp, collision:
  - Commented out some broken functions.
  - Merged some matrix functions to have optional position parameter.
  - Added checks to prevent loading if already loaded.

2020-05-26 [v2.36.5]
- Minor performance improvements

2020-05-21 [v2.36.4]
- Added AddEventCallback
- Bugfix on glow.nut

2020-05-11 [v2.36.3]
- Changed CreateTimer parameters to be consistent with Timer parameters. Removed targetname param
- AddOutput (by extension Timer and OnTimer as well) now accepts null function input
- Removed SetKeyInt, SetKeyFloat, SetKeyString and SetKeyVector functions.
- Minor performance improvements
- Bugfix on glow.nut

2020-05-05 [v2.36.2]
- Fixed a wrong constant value
- Removed misplaced garbage collection
- Bugfix on IsLookingAt, bug only present in the minified version

2020-04-27 [v2.36.1]
- Bugfixes on force userid validation
- Minor improvements on DumpEnt and DumpPlayers, fix on DumpScope
- Removed GetInfo, GetTableName, GetFuncName, FindTableByName
- Improved GetVarName, GetTableDir, (added) FindVarByName

2020-04-25 [v2.36.0]
- CreateEntity:
  - Removed the targetname parameter; it should be handled in the KV table
  - Added a 'make permanent' parameter
- Added 'make permanent' parameters on Timer and CreateTimer
- Removed CreateGameText and CreateHudHint. They can be replaced with:
    VS.CreateEntity("game_text",{})
    VS.CreateEntity("env_hudhint",{message = "initial msg"})
- Added ShowGameText, works the same as ShowHudHint (set msg, display)
- Passing SetKey a null value now skips that key
- Improved GetCaller and GetCallerFunc
- Removed SetAngles
- Removed traces of previously removed functions (IsLengthGreaterThan, IsLengthLessThan).
- Bugfixes on force userid validation

2020-04-20 [v2.35.3]
- AddOutput now accepts function parameters using a more efficient method than AddOutput2
- Removed OnTimerHigh and OnTimerLow
- Fix VectorCopy not returning, bug only present in the minified version.
- Fix SetKey wrapper functions not returning

2020-04-14
- glow.nut: Removed IsPointSized check

2020-04-10 [v2.35.2]
- Edge case fix on events
- ENT_SCRIPT is no longer chosen as an already existing logic_script entity.
    This gives the user more control, and fixes some issues.
- Changed VS.FormatWidth parameters to be consistent with the other format functions.
- Removed default parameter values on the format functions.
- Minor improvements
- glow.nut:
  - Added variable 'DEBUG' for console output
  - Added entity indices on console output

2020-04-09
- glow.nut: Changed the method of storage.

2020-04-08
- Added glow library. Not included in vs_library.

2020-04-06 [v2.35.1]
- Removed traces of previously removed functions (toRad, toDeg).
- Changed the local player's targetname to "localplayer" from "player".
- Minor improvements

2020-03-26 [v2.35.0]
- Removed default naming for script created entities to improve resource usage, and give the user more control.
- Removed VS.IsLengthGreaterThan and VS.IsLengthLessThan functions.
- AddOutput2 bugfix
- Reverted all EntFire changes.
- vs_log:
  - Added an option to export non-unique file names
  - Removed encryption options
  - Simplified internal functions

2020-03-08 [v2.34.8]
- Minor change to EntFire to function the same as before

2020-02-15 [v2.34.7]
- ???

2020-02-09 [v2.34.5]
- Minor fixes on events and GetLocalPlayer

2020-02-09 [v2.34.4]
- Removed the 'validated' parameters of GetPlayersAndBots and DumpPlayers
- Removed EntFireHandle
- Minor bug fix

2020-02-04
- vs_interp:
  - Added Catmull-Rom quaternion interpolation methods

2020-02-04 [v2.34.2]
- Modified VS.CreateMeasure to use less resources, added new parameters, changed return type.
- Added error check on VS.Timer

2020-02-01 [v2.34.1]
- Corrected VS.arrayFind parameters
- Added a parameter for making entities permanent in VS.CreateMeasure

2020-01-31 [v2.34.0]
- Documentation released
- Cleanup, various improvements and bugfixes
- Added error checks on events
- VS.AddOutput, VS.OnTimer, VS.Timer functions now accept function inputs as well as string
  - Improved performance
- Removed VS.ChangeName, VS.GetAllPlayers parameter, VS.Log.Array, VS.TraceLine.GetFraction, VS.ReplaceArrayIndex, VS.FindEntityGeneric
- Renamed FindInArray to arrayFind to be consistent with the other array functions

2020-01-24 [v2.33.1]
- Cleanup, improved performance

2020-01-23 [v2.33.0]
- Implemented auto userid validation. VS.ValidateUserid functions are removed.
- ChatTeam bugfix

2020-01-22 [v2.32.4]
- Allow EntFire to be able to pass a caller
- Make EntFireByHandle function the same as EntFireHandle, with default parameters. The native function is
  accessible with DoEntFireByInstanceHandle, naming is consistent with the engine function.

2020-01-20 [v2.32.3]
- Cleanup, no changes

2020-01-19 [v2.32.3]
- Changed license to MIT
- Removed VS.Storage

...

2019-01-26 []
- Initial public release

2016..2017 []
- Private development

--------------------------------
